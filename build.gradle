/*
 * Copyright (c) 2019 Connexta, LLC
 *
 * Released under the GNU Lesser General Public License version 3; see
 * https://www.gnu.org/licenses/lgpl-3.0.html
 */
/* Build Script */
buildscript {
    ext {
        indexApiVersion = "0.6.0"
        junitJupiterVersion = "5.5.2"
        lombokVersion = "1.18.10"
        springBootVersion = "2.2.1.RELEASE"
        springfoxSwaggerVersion = "2.9.2"
    }
    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
    }
}

plugins {
    id "com.diffplug.gradle.spotless" version "3.26.1"
    id "com.palantir.docker" version "0.22.1"
    id "jacoco"
    id "java"
    id "maven"
    id "org.owasp.dependencycheck" version "5.2.4"
    id "org.springframework.boot" version "${springBootVersion}"
    id "org.sonarqube" version "2.8"
}

group = "com.connexta.search"

repositories {
    mavenLocal()
    maven { url "https://artifacts.codice.org/content/repositories/ion-releases/" }
    maven { url "http://download.osgeo.org/webdav/geotools/" }
    mavenCentral()
}

dependencies {
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    implementation "com.connexta.search:index-api-rest-spring-stubs:${indexApiVersion}"
    implementation "com.connexta.search:query-api-rest-spring-server-stubs:0.4.0-SNAPSHOT"
    implementation "io.springfox:springfox-swagger2:${springfoxSwaggerVersion}"
    implementation "io.springfox:springfox-swagger-ui:${springfoxSwaggerVersion}"
    implementation "javax.inject:javax.inject:1"
    implementation ("org.apache.tika:tika-parsers:1.22") {
        exclude group: "c3p0", module: "c3p0"
        because "CVE-2019-5427"

        exclude group: "org.apache.cxf", module: "cxf-core"
        because "CVE-2019-12406, CVE-2019-12419"

        exclude group: "org.apache.cxf", module: "cxf-rt-security"
        because "CVE-2019-12406, CVE-2019-12419"

        exclude group: "org.apache.cxf", module: "cxf-rt-rs-client"
        because "CVE-2019-12406, CVE-2019-12419"

        exclude group: "org.apache.commons", module: "commons-compress"
        because "CVE-2019-12402"
    }
    implementation "org.apache.commons:commons-compress:1.19"
    implementation("org.geotools:gt-solr:22.1") {
        exclude group: "commons-beanutils", module: "commons-beanutils"
        because "This artifact pulled in by Geotools has a classifier \"noclassprop\". It is a " +
                "special version of the JAR file that disabled the ability for an attacker to " +
                "access the classloader via the class property. The actual filename of the " +
                "modified JAR is \"commons-beanutils-1.9.2-noclassprop.jar\". Version 1.9.4 and " +
                "higher of commons-beanutils are not vulnerable. " +
                "\"commons-beanutils:commons-beanutils:1.9.4\" is explicitly imported below. If " +
                "Geotools updates its dependencies to version 1.9.4 of the artifact, this " +
                "work-around may be removed."
    }
    implementation "commons-beanutils:commons-beanutils:1.9.4"
    implementation("org.projectreactor:reactor-spring:1.0.1.RELEASE") {
        exclude group: "org.springframework", module: "spring-context-support"
        because "CVE-2014-1904, CVE-2013-6429, CVE-2014-3578, CVE-2014-0225, CVE-2014-3625, CVE-2015-5211, CVE-2016-5007, CVE-2018-1272, CVE-2015-3192, CVE-2016-9878, CVE-2018-1271, CVE-2018-1270"
    }
    implementation "org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-webflux:${springBootVersion}"
    implementation("org.springframework.data:spring-data-solr:4.1.3.RELEASE") {
        exclude group: "junit", module: "junit" // excludes JUnit 4
    }
    testCompile "com.github.npathai:hamcrest-optional:2.0.0"
    testCompile "com.squareup.okhttp3:mockwebserver:4.2.2"
    testCompile "org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}"
    testCompile "org.junit.jupiter:junit-jupiter-params:${junitJupiterVersion}"
    testCompile "org.mockito:mockito-junit-jupiter:3.2.0"
    testCompile("org.springframework.boot:spring-boot-starter-test:${springBootVersion}") {
        exclude group: "junit", module: "junit" // excludes JUnit 4
    }
    testCompile "org.testcontainers:junit-jupiter:1.12.4"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}"
}

sourceCompatibility = 1.11
targetCompatibility = 1.11

test {
    useJUnitPlatform()
    finalizedBy(['jacocoTestReport', 'jacocoTestCoverageVerification'])
}

jacoco {
    toolVersion = "0.8.5"
    reportsDir = file("$buildDir/reports/jacoco")
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/reports/jacoco")
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.83
            }
        }
    }
}

spotless {
    File licenseFile = rootProject.file("license.java")
    format "misc", SpotlessConfig.getMisc()
    java SpotlessConfig.getJava(licenseFile)
    groovyGradle SpotlessConfig.getGroovy(licenseFile)
}

ext.configArgs = [
    "parallel"  : project.hasProperty("parallel"),
    "skipITests": project.hasProperty("skipITests"),
]

configurations.all {
    resolutionStrategy {
        force "com.fasterxml.jackson.core:jackson-databind:[2.9.9.3,)"
        force "com.google.guava:guava:[24.1.1,)"
    }
}

dependencyCheck {
    failBuildOnCVSS = 4
    failOnError = true
    cveValidForHours = 24

    analyzers {
        ossIndexEnabled = false
    }

    // Add support for NVD mirror
    if (project.hasProperty("dependencyCheckUrlModified") && project.hasProperty("dependencyCheckUrlBase")) {
        println "Using NVD Mirrors: ${dependencyCheckUrlBase} and ${dependencyCheckUrlModified}"
        cve {
            urlModified = "${dependencyCheckUrlModified}"
            urlBase = "${dependencyCheckUrlBase}"
        }
    }

    suppressionFile = "${projectDir}/owasp-suppressions.xml"
}

processResources {
    expand([indexApiVersion: "${indexApiVersion}"])
}

bootJar {
    launchScript()
}

docker {
    files tasks.bootJar.outputs
    name "cnxta/ion-search"
    buildArgs([JAR_FILE: "${tasks.bootJar.outputs.files.singleFile.name}"])
}

tasks.withType(Test) {
    dependsOn = [':solr:build']
    //  Forces Gradle to always run the tests, regardless if they are up to date or not.
    outputs.upToDateWhen { false }

    if (project.configArgs["skipITests"]) {
        exclude "**/*ITests*"
    }
}

tasks.withType(Test, TestLogger.configs(project.configArgs))

task listDependencies(type: DependencyReportTask)

task deploy(type: Exec) {
    dependsOn build
    commandLine "groovy", "deploy.groovy"
}

task deployK8s(type: Exec) {
    dependsOn build
    commandLine "groovy", "deploy-k8s.groovy"
}

assemble.finalizedBy("docker")
build.finalizedBy(['docker'])
bootRun.dependsOn(build)
